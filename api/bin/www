#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');
const { all } = require('../app');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// ajout de socket.io
const io = require('socket.io')(server, {
  cors: {
    origin: '*',
  }
});

const connectedSockets = new Set();

function getConnectedSockets() {
  return Array.from(connectedSockets);
}

// établissement de la connexion
io.on('connection', (socket) => {
  console.log(`Connecté au client ${socket.id}`);

  socket.on('disconnect', function () {
    connectedSockets.delete(socket);
  });

  socket.on('SEND_MESSAGE', function (data) {
    io.to(data.room).emit('RECEIVE_MESSAGE', data);
  })

  socket.on('SEND_PRIVATE_MESSAGE', function (data) {
    var found = false;

    getConnectedSockets().forEach(function (s) {
      if (s.handshake.username == data.receiver && s.handshake.room == data.room) {
        socket.to(s.id).emit('RECEIVE_MESSAGE', data);
        data.separator = " (to " + data.receiver + ")";
        console.log(data.room)
        console.log(socket.id)
        console.log(s.id)
        io.to(socket.id).emit('RECEIVE_MESSAGE', data);

        found = true;
      }
    })

    if (!found) {
      io.to(socket.id).emit('RECEIVE_ERROR', {
        message: 'Couldn\'t find username with the name : ' + data.receiver + 'in this room'
      });
    }
  })

  socket.on('JOIN_ROOM', function (data) {
    socket.handshake.username = data.username;
    socket.handshake.room = data.room;
    socket.handshake.parentId = data.parentId;
    socket.join(data.room);
    connectedSockets.add(socket);
  })

  socket.on('QUIT_ROOM', function (data) {
    getConnectedSockets().forEach(function (s) {
      if (s.id == data.id) {
        s.emit('ROOM_DELETED', data.room);
        s.leave(data.room);
        connectedSockets.delete(s);
      }
    });
  })

  socket.on('DELETE_ROOM', function (data) {
    getConnectedSockets().forEach(function (s) {
      if (s.rooms.has(data.room)) {
        s.emit('ROOM_DELETED', data.room);
        s.leave(data.room);
        connectedSockets.delete(s);
      }
    });
  });

  socket.on('ASK_USERS', function (data) {
    var allUsers = new Array();
    getConnectedSockets().forEach(function (s) {
      if (s.rooms.has(data.room)) {
        allUsers.push(s.handshake.username);
      }
    })

    io.to(socket.id).emit('RECEIVE_USERS', {
      listUsers: allUsers
    })
  })

  socket.on('SET_NEW_USERNAME', function (data) {
    socket.handshake.username = data.newUsername;
  })
})




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
